-- 실수형 자료

#include <stdio.h>

int main()
{
    float num1 = 0.1f;               // 단정밀도 부동소수점 변수를 선언하고 값을 할당
                                     // float는 숫자 뒤에 f를 붙임

    double num2 = 3867.215820;       // 배정밀도 부동소수점 변수를 선언하고 값을 할당
                                     // double은 숫자 뒤에 아무것도 붙이지 않음

    long double num3 = 9.327513l;    // 배정밀도 부동소수점 변수를 선언하고 값을 할당
                                     // long double은 숫자 뒤에 l을 붙임

    // float와 double은 %f로 출력, long double은 %Lf로 출력
    printf("%f %f %Lf\n", num1, num2, num3);   
       // 0.100000 3867.215820 9.327513

    return 0;
}

[참고]
• %f: 부동소수점(floating point)의 약어로 f를 사용
• %Lf: long floating point에서 point를 제외한 첫 글자를 따서 Lf를 사용

--지수 표기법
#include <stdio.h>

int main()
{
    float num1 = 3.e5f;             // 지수 표기법으로 300000을 표기 => e5 = . 점 뒤로 5개 이동
                                    // float는 숫자 뒤에 f를 붙임

    double num2 = -1.3827e-2;       // 지수 표기법으로 -0.013827을 표기 => . 점 앞으로 2개 이동
                                    // double은 숫자 뒤에 아무것도 붙이지 않음

    long double num3 = 5.21e+9l;    // 지수 표기법으로 5210000000을 표기 => . 뒤로 9개 이동
                                    // long double은 숫자 뒤에 l을 붙임

    // float와 double은 %f로 출력, long double은 %Lf로 출력
    printf("%f %f %Lf\n", num1, num2, num3); // 300000.000000 -0.013827 5210000000.000000

    // 지수 표기법으로 출력할 때는 float와 double은 %e로 출력, long double은 %Le로 출력
    printf("%e %e %Le\n", num1, num2, num3); // 3.000000e+05 -1.382700e-02 5.210000e+09

    return 0;
}


-- 실수 자료형의 크기
#include <stdio.h>

int main()
{
    float num1 = 0.0f;
    double num2 = 0.0;
    long double num3 = 0.0l;

    printf("float: %d, double: %d, long double: %d\n",
        sizeof(num1),     // 4 바이트 : sizeof로 float 변수의 자료형 크기를 구함
        sizeof(num2),     // 8 바이트 : sizeof로 double 변수의 자료형 크기를 구함
        sizeof(num3)      // 8 바이트 : sizeof로 long double 변수의 자료형 크기를 구함
    );

    return 0;
} // float: 4, double: 8, long double: 8


--실수 자료형의 오버플로우와 언더플로우가 발생


#include <stdio.h>
#include <float.h>    // 실수 자료형의 양수 최솟값, 최댓값이 정의된 헤더 파일

int main()
{
    float num1 = FLT_MIN;    // float의 양수 최솟값
    float num2 = FLT_MAX;    // float의 양수 최댓값

    // float의 양수 최솟값을 100000000.0으로 나누면 아주 작은 수가 되면서 언더플로우 발생
    num1 = num1 / 100000000.0f;

    // float의 양수 최댓값에 1000.0을 곱하면 저장할 수 있는 범위를 넘어서므로 오버플로우 발생
    num2 = num2 * 1000.0f;

    printf("%e %e\n", num1, num2);    // 0.000000e+00 inf: 실수의 언더플로우는 0 (쓰레기 값 처리)
                                      // 오버플로우는 무한대가 됨 (정수와 다름)
    return 0;
}

[실행 결과]
0.000000e+00 inf
